---
import "@/styles/global.css";
import ArrowForwardIcon from "@/assets/icons/arrow-forward.svg";
import type { CollectionEntry } from "astro:content";

// using Interface for type checking is neat
// I should use this elsewhere
interface Props {
  projectData: CollectionEntry<"projects">;
}
const { projectData } = Astro.props;
---

<a
  class="project-card p-4 rounded-lg max-w-md group"
  href={projectData.data.link}
>
  <div class="object-contain">
    <img
      src={projectData.data.thumbnail}
      alt={projectData.data.title}
      class="rounded-lg box-border group-hover:m-[0.08rem] group-active:m-[0.08rem] transition-all duration-200"
    />
  </div>

  <div class="text-left">
    <h3 class="pt-4 flex items-center">
      <span class="pr-2">{projectData.data.title}</span>

      <ArrowForwardIcon
        class="w-4 text-slate-500 group-hover:translate-x-1 group-active:translate-x-1 transition duration-200"
      />
    </h3>
    <p class="pt-0.5">{projectData.data.description}</p>
    <div
      class="flex text-xs gap-3 py-1.5 text-slate-500 group-hover:text-text group-active:text-text transition duration-200"
    >
      {projectData.data.technologies.map((tech: any) => <div>{tech}</div>)}
    </div>
  </div>
</a>

<style>
  @reference "@/styles/global.css";

  @property --myColor1 {
    syntax: "<color>";
    initial-value: rgba(0, 0, 0, 0);
    inherits: false;
  }

  @property --myColor2 {
    syntax: "<color>";
    initial-value: rgba(0, 0, 0, 0);
    inherits: false;
  }

  .project-card {
    @apply transition ease-in duration-200;
    background: linear-gradient(var(--myColor1), var(--myColor2));
    transition:
      --myColor1 500ms,
      --myColor2 500ms;
  }

  .project-card:hover {
    cursor: pointer;
    --myColor1: rgba(220, 255, 249, 0.1);
    --myColor2: rgb(200, 253, 244);
  }

  .project-card:active {
    --myColor1: rgba(220, 255, 249, 0.1);
    --myColor2: rgb(200, 253, 244);
  }
</style>
